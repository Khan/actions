{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;AEDA;AACA;AACA;AACA","sources":["../actions/get-changed-files/index.js","/webpack/bootstrap","/webpack/runtime/compat","/webpack/before-startup","/webpack/startup","/webpack/after-startup"],"sourcesContent":["// Get the changed files for a pull-request or push\n\nconst getBaseAndHead = (context, core) => {\n    switch (context.eventName) {\n        case \"pull_request_target\":\n        case \"pull_request\":\n            return [\n                context.payload.pull_request?.base?.ref,\n                context.payload.pull_request?.head?.sha,\n            ];\n        case \"push\":\n            return [context.payload.before, context.payload.after];\n        default:\n            core.setFailed(\n                `This action only supports pull requests and pushes, ${context.eventName} events are not supported. ` +\n                    \"Please submit an issue on this action's GitHub repo if you believe this in correct.\",\n            );\n    }\n};\n\nmodule.exports = async ({github, context, core, directoriesRaw}) => {\n    const directories = directoriesRaw\n        .split(\"\\n\")\n        .map((item) => item.trim())\n        .filter(Boolean)\n        .map((item) => (item.endsWith(\"/\") ? item : item + \"/\"));\n\n    const [base, head] = getBaseAndHead(context, core);\n    core.info(`Base: ${base}\\nHead: ${head}`);\n\n    // Ensure that the base and head properties are set on the payload.\n    if (!base || !head) {\n        core.setFailed(\n            `The base and head commits are missing from the payload for this ${context.eventName} event.`,\n        );\n        return;\n    }\n\n    // Use GitHub's compare two commits API.\n    // https://developer.github.com/v3/repos/commits/#compare-two-commits\n    const response = await github.rest.repos.compareCommits({\n        base,\n        head,\n        owner: context.repo.owner,\n        repo: context.repo.repo,\n    });\n\n    // Ensure that the request was successful.\n    if (response.status !== 200) {\n        core.setFailed(\n            `The GitHub API for comparing the base and head commits for this ${context.eventName} event returned ${response.status}, expected 200.`,\n        );\n    }\n\n    let files = response.data.files.filter((file) =>\n        [\"added\", \"modified\", \"renamed\"].includes(file.status),\n    );\n    if (directories.length) {\n        files = files.filter((file) =>\n            directories.some((directory) =>\n                file.filename.startsWith(directory),\n            ),\n        );\n    }\n    const fileNames = files.map((file) => file.filename);\n    const serialized = JSON.stringify(fileNames);\n\n    core.info(`Added or renamed or modified: ${serialized}`);\n    core.setOutput(\"files\", serialized);\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(990);\n",""],"names":[],"sourceRoot":""}